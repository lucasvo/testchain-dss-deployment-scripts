#!/usr/bin/env bash
set -x

# Remove ./out folder
rm -rf ./out

# Get config variables
CONFIG_STEP=${CONFIG_STEP:-"step-1"}
. lib/common.sh

# Send ETH to Omnia Relayer
OMNIA_RELAYER=$(jq -r ".omniaFromAddr" "$CONFIG_FILE")
seth send "$OMNIA_RELAYER" --value "$(seth --to-wei 10000 eth)"

# Deploy Values or Medians + OSMs (if delay > 0) (no solc optimization)
cd contracts/osm
dapp build
cd ../testchain-medians
dapp build

tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")
for token in $tokens; do
    type=$(jq -r ".tokens.${token} | .pip | .type" "$CONFIG_FILE")
    # Deploy Medianizer as Feed
    if [ "${type}" = "median" ]; then
        cd ../testchain-medians
        eval export "\VAL_${token}=$(dapp create "Median${token}USD")"
        signers=$(jq -r ".tokens.${token} | .pip | .signers | .[]" "$CONFIG_FILE")
        # Approve oracle price feed providers
        for signer in $signers; do
            seth send "$(eval echo "\$VAL_${token}")" 'lift(address)' "$signer"
        done
        # Set quorum for Medianizer
        seth send "$(eval echo "\$VAL_${token}")" 'setBar(uint256)' "$(seth --to-uint256 3)"
        # Whitelist Omnia relayer to read price from Medianizer
        seth send "$(eval echo "\$VAL_${token}")" 'kiss(address)' "$OMNIA_RELAYER"
    fi
    # Deploy DSValue as Feed
    if [ "${type}" = "value" ]; then
        cd ../osm
        eval export "\VAL_${token}=$(dapp create DSValue)"
    fi
    # Deploy OSM if delay > 0
    osm_delay=$(jq -r ".tokens.${token} | .pip | .osmDelay" "$CONFIG_FILE")
    if [ "$osm_delay" -gt 0 ]; then
        cd ../osm
        # Deploy OSM
        eval export "\PIP_${token}=$(dapp create OSM "$(eval echo "\$VAL_${token}")")"
        # Set OSM delay
        seth send "$(eval echo "\$PIP_${token}")" 'step(uint16)' "$osm_delay"
        # Whitelist OSM in Medianizer (skip if source is DSValue)
        [[ "${type}" = "median" ]] && seth send "$(eval echo "\$VAL_${token}")" 'kiss(address)' "$(eval echo "\$PIP_${token}")"
    else
        eval export "PIP_${token}=\$VAL_${token}"
    fi
done

cd ../../

# shellcheck source=/dev/null
$SOURCE_PATH/base-deploy

# shellcheck source=/dev/null
. $SOURCE_PATH/scripts/load-addresses

# Whitelist Spotter
for token in $tokens; do
    osm_delay=$(jq -r ".tokens.${token} | .pip | .osmDelay" "$CONFIG_FILE")
    type=$(jq -r ".tokens.${token} | .pip | .type" "$CONFIG_FILE")
    if [ "$osm_delay" -gt 0 ]; then
        # Whitelist Spotter in OSM
        seth send "$(eval echo "\$PIP_${token}")" 'kiss(address)' "$(eval echo "\$MCD_SPOT")"
    elif [ "${type}" = "median" ]; then
        # Whitelist Spotter in Medianizer
        seth send "$(eval echo "\$VAL_${token}")" 'kiss(address)' "$(eval echo "\$MCD_SPOT")"
    fi
done

if [ "$CONFIG_STEP" = "step-1" ]; then
    # shellcheck source=/dev/null
    $SOURCE_PATH/scripts/set-pause-delay
fi

# Copy abi files
cp $DAPP_LIB/testchain-medians/out/Median.abi ./out/abi
cp $DAPP_LIB/osm/out/DSValue.abi ./out/abi
cp $DAPP_LIB/osm/out/OSM.abi ./out/abi

echo "STEP 1 COMPLETED SUCCESSFULLY"
